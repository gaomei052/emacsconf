* 配置说明
** 模块说明
| 模块                  | 模块说明                            |
|----------------------+-----------------------------------|
| lsp-mode             | Emacs lsp客户端                    |
| yasnippet            | 预制代码块,并快速插入                |
| lsp-treemacs         | 代码结构等                          |
| helm-lsp             | lsp对chart的支持                    |
| projectile           | emacs项目管理                       |
| ag                   | emacs调用ag的客户端                 |
| hydra                | debug时快捷键调试                   |
| flycheck             | 语法检测                            |
| company              | 补全                               |
| avy                  | 代码跳转                            |
| which-key            | 快捷键绑定显示                      |
| helm-xref            | 符号查找                            |
| dap-mode             | 代码debug                          |
| exec-path-from-shell | 将env中PATH变量添加到exec-path变量中 |
| json-mode            | json语法高亮标记hook等              |
| zenburn-theme        | 主题                               |
| typescript-mode      | typescript语法高亮标记hook等        |
| python-mode          | python语法高亮标记hook等            |
| go-mode              | go语法高亮标记hook等                |
| lua-mode             | lua语法高亮标记hook等               |
| lsp-pyright          | pyright前端                        |
| magit                | git客户端                          |
|----------------------+-----------------------------------|

1. lsp-mode
   - 该模块为开启lsp相关功能
   
2. yasnippet
   - 该模块可以自定义一些代码片段,以快捷方式插入例如下
   - 在emacs里M-x yas-new-snippet可以创建指定mode的snippet模板
   - 如下示例会创建一个c-mode的snippet
   
    #+BEGIN_SRC snippet-template
      # -*- mode: snippet -*-
      # name: main
      # key: main
      # --
     
      #include <stdio.h>
     
      int main()
      {
     
     	 return 0;
      }
    #+END_SRC

    使用M-x yas-insert-snippet可以插入创建的模板,结果如下
    #+BEGIN_SRC c
      #include <stdio.h>
     
      int main()
      {
     
	return 0;
      }
    #+END_SRC

3. lsp-treemacs
   - 是 Emacs 中一个功能强大的插件，它结合了 Language Server Protocol (LSP) 和 Treemacs 的优势，为开发者提供了一个直观、高效的代码导航和浏览工具。
   - 主要功能如下:
     1) 代码符号浏览
	- 以树形结构显示代码中的各种符号(函数,类,变量等),方便快速定位.
     2) 跳转到定义
	- 快速跳转到符号定义处.
     3) 查找引用
	- 查找符号在代码中的所有引用.
     4) 代码结构视图
	- 显示代码的结构,如函数调用关系,类继承关系等.
     5) 错误和警告提示
	- 显示LSP提供的错误和警告信息
     6) 代码补全
	- 提供基于LSP的代码补全建议

4. helm-lsp
   - 是一个为 Helm Chart(一个k8s预排版功能,使用go模板引擎) 提供语言服务器协议 (Language Server Protocol, LSP) 支持的工具。它将 Helm Chart 的语法和结构暴露给 LSP 客户端（如 Emacs、VS Code 等），从而为 Helm Chart 的编辑提供智能补全、跳转到定义、代码检查等高级功能
   - 主要功能如下:
     1. 智能补全
	- 在编写Helm Chart时,提供函数,参数,模板变量等的智能补全建议,减少出错
     2. 跳转到定义
	- 可以快速跳转到函数,模板的定义处,方便代码阅读和维护
     3. 代码检查
	- 检查Helm Chart中的语法错误,潜在问题和最佳实践违规,提高代码质量.
     4. 重构
	- 支持一些简单的重构操作,如重命名变量,提取函数等.
     5. 与其他LSP客户端集成
	- 可以与各种支持的LSP的编辑器集成,提供统一的代码编辑体验

5. projectile
   - 一个Emacs项目管理工具
   - 主要功能如下:
     1) 项目查找
	- 快速查找并切换项目
     2) 文件查找
	- 在项目中查找文件
     3) 缓冲区管理
	- 根据项目管理缓冲区
     4) 标记
	- 对项目中的文件进行标记
     5) 自定义命令
	- 自定义针对项目的命令

6. ag
   - 一个配合projectile搜索代码源文件中关键字的工具

7. hydra
   - Hydra 是一个 Emacs Lisp 库，它提供了一种组织和管理按键绑定（keybindings）的强大方式。通过 Hydra，你可以将一系列相关的命令组织成一个“Hydra”，这样，你只需要按下几个按键，就可以快速访问一系列功能，而不需要记住复杂的按键组合。

8. flycheck
   - Flycheck 是一个功能强大的 Emacs 插件，它可以 在您编辑代码的同时实时进行语法检查。它支持多种编程语言，并能根据不同的语言调用相应的语法检查工具，帮助你尽早发现并纠正代码中的错误。
   - 主要功能如下:
     1) 实时语法检查
	- Flycheck 是一个功能强大的 Emacs 插件，它可以 在您编辑代码的同时实时进行语法检查。它支持多种编程语言，并能根据不同的语言调用相应的语法检查工具，帮助你尽早发现并纠正代码中的错误。
     2) 多种语言支持
	- Flycheck 支持 Python、C++、Java、JavaScript 等等多种编程语言。
     3) 可配置性高
	- 你可以自定义 Flycheck 的行为，例如，设置检查的频率、错误提示的方式等等。
     4) 集成Emacs生态
	- Flycheck 可以与 Emacs 的其他功能无缝集成，例如，你可以跳转到错误所在的行，或者查看错误的详细信息。

9. company
   - Company 是 Emacs 中一个功能强大的代码补全框架，它的名字 "Company" 来自于 "Complete Anything"，意为 "完成任何东西"。它提供了一种灵活且可扩展的方式，能够根据上下文自动补全代码，大大提高了编程效率。
   - 主要功能如下:
     1) 多种实例来源
	- Company 可以从多种来源获取补全候选，包括缓冲区中的单词、符号、变量、函数名、文件路径、自定义函数等。
     2) 可配置性高
	- 你可以自定义补全的行为，例如，设置候选的排序方式、显示方式、触发方式等。
     3) 扩展性强
	- Company 提供了一个插件系统，可以很容易地添加新的补全源。
     4) 集成性好
	- Company 可以与 Emacs 的其他功能无缝集成，例如，与语法高亮、缩进、自动补全等功能配合使用。

10. avy
    - Avy 是一个功能强大的 Emacs 插件，它提供了一种基于字符的决策树方式来在文本中快速跳转。通过输入几个字符，你就能精确地定位到想要的位置。这种导航方式比传统的行号或关键字搜索更加直观和高效。
    - 主要功能如下:
      1) 快速跳转到任意字符
	 - 不用再费力地数行号或使用复杂的搜索命令，只需输入几个字符即可。
      2) 支持多种对象
	 - 不仅可以跳转到字符，还可以跳转到单词、行、函数等。
      3) 高度可定制
	 - 可以自定义绑定键、预览窗口样式等。
      4) 与其它插件兼容性好
	 - 可以与 Emacs 的其他插件无缝集成。

11. which-key
    - which-key 是一个强大的 Emacs 插件，它能实时显示你当前输入的按键组合对应的所有可能命令。想象一下，当你按下几个按键时，会弹出一个小的提示框，里面列出了所有以这些按键开头的命令。这样一来，你就不需要死记硬背所有的快捷键，而是可以边输入边查看，大大提高了你的 Emacs 使用效率。
    - 主要功能如下:
      1) 实时提示
	 - 在你输入按键组合的同时，实时显示可能的命令。
      2) 自定义提示
	 - 可以自定义提示框的外观、内容、延迟时间等。
      3) 命令搜索
	 - 可以通过输入命令名称来快速定位对应的快捷键。
      4) 与其它插件兼容
	 - 可以与 Emacs 的其他插件无缝集成。

12. helm-xref
    - helm-xref 是 Emacs 中一个功能强大的插件，它结合了 Helm 的交互式选择框架和 xref 的符号查找功能，为用户提供了高效、直观的代码导航体验。通过 helm-xref，你可以快速查找函数、变量、类等符号的定义和引用，从而更好地理解代码结构，提高开发效率。
    - 主要功能如下:
      1) 符号查找
	 - 可以根据符号名称快速查找其定义和引用位置。
      2) 交互式选择
	 - 使用 Helm 的交互式选择界面，可以方便地浏览和选择查找结果。
      3) 多后端支持
	 - 支持多种编程语言的后端，可以根据不同的编程语言进行符号查找。
      4) 自定义配置
	 - 可以根据个人喜好对 helm-xref 进行配置，例如设置显示的字段、快捷键等。

13. dap-mode
    - dap-mode 是 Emacs 中一个功能强大的调试插件，它基于 Debug Adapter Protocol (DAP) 协议，提供了一个统一的接口来调试多种编程语言。通过 dap-mode，你可以直接在 Emacs 中设置断点、单步调试、查看变量、调用堆栈等，极大地提高了你的调试效率。
    - 主要功能如下:
      1) 多语言支持
	 - 支持所有拥有dap协议调试工具的语言
      2) 丰富的调试功能
	 - 提供了设置断点、单步调试、查看变量、调用堆栈、条件断点等全面的调试功能。
      3) 可定制性强
	 - 可以高度自定义调试界面和行为，以适应不同的需求。
      4) 与LSP协同工作
	 - dap-mode 可以与 LSP 无缝集成，提供更智能的调试体验。

14. json-mode/typescript-mode/python-mode/pgo-mode/lua-mode
    - 对各种纯文本文件进行细分类别,语法高亮等

15. lsp-pyright
    - pyright的Emacs客户端

16. magit
    - Emacs中的git插件

** 配置(主要说明LSP配置和DAP配置)
- [[https://emacs-lsp.github.io/lsp-mode/][LSP和DAP的官方网站]]

- 具体配置请查看packageConfig/lsp_conf.el与packageConfig/dap文件中的配置
- 该文件中包含了C/C++,go,python,lua,perl,typescript/javascript,awk的LSP配置
- 还包含了C/C++,go,python的DAP配置
- 以上这些配置在官方网站中都有说明需要安装那些后端
- 下面以表格的形式说明
| 语言    | LSP插件                                             | LSP语言后端                                                          | DAP插件后端                                                     |
|--------+----------------------------------------------------+--------------------------------------------------------------------+---------------------------------------------------------------|
|        |                                                    | clangd                                                             | lldb-vscode                                                   |
| C/C++  | /                                                  | [[https://clangd.llvm.org/installation.html][clangd下载]]                                                          | [[https://github.com/llvm/llvm-project.git][lldb-vscode下载]]                                                |
|        |                                                    | 可以配置lsp-clangd-binary-path指定clangd                             | 可以配置dap-lldb-debug-program变量执行lldb-vscode二进制文件的list |
|--------+----------------------------------------------------+--------------------------------------------------------------------+---------------------------------------------------------------|
|        |                                                    | gopls                                                              | dlv                                                           |
| golang | /                                                  | go install golang.org/x/tools/gopls@latest                         | go get github.com/go-delve/delve/cmd/dlv                      |
|        |                                                    | 可以配置lsp-gopls-server-path变量指定gopls二进制文件                   |                                                               |
|--------+----------------------------------------------------+--------------------------------------------------------------------+---------------------------------------------------------------|
|        | lsp-pyright                                        | pyright                                                            | debugpy                                                       |
| python | package-install RET lsp-pyright RET                | pip install pyright                                                | pip install debygpy                                           |
|        | 可以配置lsp-pyright-langserver-command变量指定pyright |                                                                    | 可以使用Dap-python-debugger指定debuggpy                         |
|--------+----------------------------------------------------+--------------------------------------------------------------------+---------------------------------------------------------------|
|        | ts-ls                                              | typescript-language-server                                         |                                                               |
| ts/js  | M-x lsp-install-server RET ts-ls RET               | npm i -g typescript-language-server; npm i -g typescript           |                                                               |
|        |                                                    |                                                                    |                                                               |
|--------+----------------------------------------------------+--------------------------------------------------------------------+---------------------------------------------------------------|
|        |                                                    | lua-lsp                                                            |                                                               |
| lua    |                                                    | luarocks install --server=https://luarocks.org/dev lua-lsp --local |                                                               |
|        |                                                    | lua-lsp兼容于lua5.1/lua5.2/lua5.3                                   |                                                               |
|--------+----------------------------------------------------+--------------------------------------------------------------------+---------------------------------------------------------------|
|        |                                                    | PLS                                                                |                                                               |
| perl   |                                                    | cpan PLS                                                           |                                                               |
|        |                                                    |                                                                    |                                                               |
|--------+----------------------------------------------------+--------------------------------------------------------------------+---------------------------------------------------------------|
|        |                                                    | awk-language-server                                                |                                                               |
| awk    |                                                    | npm i -g awk-language-server                                       |                                                               |
|        |                                                    | 可以配置lsp-awk-executable变量指定awk二进制文件                        |                                                               |
|--------+----------------------------------------------------+--------------------------------------------------------------------+---------------------------------------------------------------|
